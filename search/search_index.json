{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DuckDB Kotlin Multiplatform library","text":"<p>A kotlin mpp library for the duckdb analytical database. Currently supporting macos, linux and eventually jvm.</p>"},{"location":"#gradle-configuration","title":"Gradle configuration","text":"<pre><code>repositories{\n    maven(\"https://maven.danbrough.org\")\n}\n\nkotlin {\n    commonMain {\n        dependencies(\"org.danbrough:duckdb:1.0.0-alpha01\")\n    }\n}\n</code></pre>"},{"location":"#example-code","title":"Example Code","text":"<p>see: demo.kt for full source.</p> <p>Run the demo with <code>./gradlew duckdb:runDemo</code></p> <pre><code>import org.danbrough.duckdb.duckdb \n\nfun demo(args: Array&lt;String&gt;) {\n    duckdb(\"stuff.db\") {\n        connect {\n            query(\"CREATE TABLE IF NOT EXISTS stuff(id INTEGER PRIMARY KEY,name VARCHAR)\") {}\n\n            val size = query(\"SELECT COUNT(*) FROM stuff\") {\n                getULong(0UL, 0UL)\n            }\n            log.info { \"stuff size: $size\" }\n\n            if (size == 0UL) {\n                log.info { \"inserting ${stuffItems.size} items..\" }\n                append(\"stuff\") {\n                    stuffItems.forEachIndexed { id, name -&gt;\n                        row {\n                            appendInt32(id).appendVarchar(name)\n                        }\n                    }\n                }\n            }\n\n            query(\"SELECT name FROM stuff LIMIT 1000\") {\n                repeat(rowCount.toInt()) {\n                    println(getVarchar(it.toULong(), 0UL))\n                }\n            }\n        }\n    }\n}\n\nval stuffItems = listOf(\n    \"ligand\",\n    \"twister\",\n    \"bough\",\n    \"traffic\",\n    \"atrium\",\n  ...\n</code></pre>"}]}